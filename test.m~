% %test file for debugging



%eddy quad / squad


subjects = uipickfiles;

%for i = 1:length(subjects)
 for i = 15:37
    
    [upper_path, PAR_NAME, ~] = fileparts(subjects{1,i});
    
    %move into participants folder
    cd([startdir '/derivatives/diff_data/' PAR_NAME, '/dwi/']);
    
    %add participants eddy qc data onto the collated text file.
    RunEddyQuad(startdir, ScriptDirectory, PAR_NAME, datafile);
    
end








fid = fopen('EddySQUADList.txt', 'w');
if (fid == -1)
    disp('Error in creating the text file.')
else
    fclose(fid)
end 


subjects = uipickfiles;

fid1=fopen('EddySQUADList.txt', 'a+');

for i = 1:length(subjects)
    
    [upper_path, PAR_NAME, ~] = fileparts(subjects{1,i});
    full_path = ([upper_path '/' PAR_NAME '/']);
    
    if (fid == -1)
        disp('Error in opening the file.')
    else
        fprintf(fid1, '%s%s', PAR_NAME, '/dwi/eddyqc_all');
        fprintf(fid1, '\n');
    end
    
end
    

fclose(fid1)


    %move into participants folder
    cd([startdir '/derivatives/diff_data/' PAR_NAME, '/dwi/']);
    
    %add participants eddy qc data onto the collated text file.
    eddyqc_all(PAR_NAME, startdir);
    
    end
    
    
    
    dwipreproc -pe_dir AP -rpe_pair -se_epi Blips.nii.gz -fslgrad B1000.bvec B1000.bval -export_grad_fsl B1000_dc.bvec B1000_dc.bval B1000_gc.nii.gz B1000_dc.nii.gz -nthreads 4 -force -eddyqc_all B1000_eddyQC
    eddy_quad B1000_eddyQC -idx 1000_index.txt -par acqparams.txt -m B1000_brain_mask.nii.gz -b B1000.bval

 
    
 %go into eddyqc_all folder and move and rename files (with same base name 
 %as eddy datafile to main participant folder   
 
 cd eddyqc_all;
 files = dir('eddy*');
 newFilePart = 'eddy_quad.';
 
 for i = 1:length(files)
     [pathname,filename,extension] = fileparts(files(i).name);
     %add in the base name at the beginning to all of the files
     movefile([filename extension], [newFilePart filename extension]);
 end 
 
 %go back into main participant folder
  cd([startdir '/derivatives/diff_data/' PAR_NAME, '/dwi/']);

 
 %make a copy and rename the eddy corrected datafile
 copyfile(['ebbcgd', PAR_NAME, datafile,'.nii'], 'eddyqc_all/eddy_quad.nii');
 
 
%perform eddy quad on the participant
unix(['eddy_quad eddy_quad -idx ' ScriptDirectory '/files/index.txt -par ' ScriptDirectory '/files/acqparams.txt -m brain_mask_' PAR_NAME, datafile, '.nii -b ' PAR_NAME, datafile, '.bval']);
    
unix(['eddy_quad eddy_ -idx ' ScriptDirectory '/files/index.txt -par ' ScriptDirectory '/files/acqparams.txt -m brain_mask_' PAR_NAME, datafile, '.nii -b ' PAR_NAME, datafile, '.bval']);


unix(['eddy_squad EddySQUADList.txt']);



%print image values in a text file with fsl command

unix(['fsl2ascii eddy_mask.nii eddy_mask_values.txt']);

unix(['fsl2ascii eddy_cnr_maps.nii.gz eddy_cnr_maps_values.txt']);

unix(['fsl2ascii eddy_residuals.nii.gz eddy_residuals_values.txt']);



fid = fopen('eddy_mask_values.txt00000', 'r');

fid1 = fopen('eddy_cnr_maps_values.txt00000', 'r');
fid2 = fopen('eddy_cnr_maps_values.txt00001', 'r');
fid3 = fopen('eddy_cnr_maps_values.txt00002', 'r');

EddyMaskValues = fscanf(fid, '%f');

image_SNR_b0_values = fscanf(fid1, '%f');
image_CNR_b1000_values = fscanf(fid2, '%f');
image_CNR_b2000_values = fscanf(fid3, '%f');
% 
% MValues = sum(EddyMaskValues(:)==1);
% 
% SNR_b0_sum = sum(image_SNR_b0_values(:));
% CNR_b1000_sum = sum(image_CNR_b1000_values(:));
% CNR_b2000_sum = sum(image_CNR_b2000_values(:));

%get the values from the shells
SNR_b0 = mean(image_SNR_b0_values)/std(image_SNR_b0_values);
CNR_b1 = 
CNR_b2

fclose(fid);
fclose(fid1);
fclose(fid2);
fclose(fid3);


unix(['mrinfo ' PAR_NAME, datafile, '.nii']);
unix(['mrinfo ebbcgd2' PAR_NAME, datafile, '.nii']);
unix(['mrinfo eddy_mask.nii']);
unix(['mrinfo eddy_cnr_maps.nii.gz']);

 
%collate all eddy qc info - loop 
subjects = uipickfiles;

for i = 1:length(subjects)
    
    [upper_path, PAR_NAME, ~] = fileparts(subjects{1,i});
    full_path = ([upper_path '/' PAR_NAME '/']);
    
    %move into participants folder
    cd([startdir '/derivatives/diff_data/' PAR_NAME, '/dwi/']);
    
    %add participants eddy qc data onto the collated text file.
    eddyqc_all(PAR_NAME, startdir);
    
end

% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% %expressing the effect size relative to controls
% 
% %for fd
% unix(['mrcalc stats_fd/abs_effect.mif stats_fd/beta0.mif  -div 100 -mult stats_fd/percentage_effect.mif -force']);
% %for fdc
% unix(['mrcalc stats_fdc/abs_effect.mif stats_fdc/beta0.mif  -div 100 -mult stats_fdc/percentage_effect.mif']);
% 
% 
% %for fc
% unix(['mrcalc 1 1 stats_log_fc/abs_effect.mif -exp -div -sub stats_log_fc/percentage_effect.mif']);
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% %SLF tractography
% 
% unix(['mrconvert wmfod_template.mif wmfod_template.nii']);
% 
% 
% %HCP atlas (followed by BATMAN)
% 
% unix(['mri_surf2surf --srcsubject fsaverage --trgsubject ' PAR_NAME ' --hemi lh --sval-annot ' startdir '/files/freesurfer/lh.hcpmmp1.annot --tval ' startdir '/derivatives/diff_data/' groupname '/connectome/' PAR_NAME '/label/lh.hcpmmp1.annot']);
% unix(['mri_surf2surf --srcsubject fsaverage --trgsubject ' PAR_NAME ' --hemi rh --sval-annot ' startdir '/files/freesurfer/rh.hcpmmp1.annot --tval ' startdir '/derivatives/diff_data/' groupname '/connectome/' PAR_NAME '/label/rh.hcpmmp1.annot']);
% 
% unix(['mri_aparc2aseg --old-ribbon --s ' PAR_NAME ' --annot hcpmmp1 --o hcpmmp1.mgz']);
% unix(['mrconvert datatype uint32 hcpmmp1.mgz hcpmmp1.mif']);
% 
% unix(['mrtransform hcpmmp1_parcels_nocoreg.mif -linear transform_mrtrix_t12dwi.txt -inverse -datatype uint32 hcpmmp1_parcels_coreg.mif']);
% 
% unix(['tck2connectome -symmetric -zero_diagonal -scale_invnodevol sift_1M_' PAR_NAME '.tck hcpmmp1_parcels_coreg.mif hcpmmp1_' PAR_NAME '.csv -out_assignment assignments_hcpmmp1_' PAR_NAME '.csv']);
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% %folder testing
% folder1 = fullfile('folder1')
% folder2 = fullfile('folder2')
% 
% copyfile (folder1, fullfile(folder2, 'folder1'));
% 
% 
% 
% 
% 
% %create a population template with all / a representative 30-40
% %participants of the 5tt image used as an input for ACT
% 
% mkdir([startdir,'/derivatives/diff_data/', groupname, '/pop_temp_5tt']);
% 
% for i = 1:length(pop_rep_pts)
%     [upper_path, POP_PAR, ~] = fileparts(pop_rep_pts{1,i});
%     POP_PAR = POP_PAR(1:15);
%     copyfile (['5ttimage_' POP_PAR '.mif'], [startdir,'/derivatives/diff_data/', groupname, '/pop_temp_5tt/']);
% end
% tic
% unix(['population_template pop_temp_5tt 5tt_template.mif']);
% toc
% %Elasped time: 1 hour and 50 min
% 
% unix(['mrconvert 5tt_template.mif 5tt_template.nii']);
% 
% 
% %Or, get the 1 mean image across all 5tt images: 
% 
% %unix(['mrmath mean 5ttimage_' PAR_NAME '.mif']);
% %with first 3 pts:
% unix(['mrmath 5ttimage_sub-ADPRC0001F0.mif 5ttimage_sub-ADPRC0002F0.mif 5ttimage_sub-ADPRC0003F0.mif mean 5tt_average3_.mif']);
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% %use dwi2response dhollander algorithm
% 
% %generate a response function per each subject - use multi-shell data option
% unix(['dwi2response msmt_5tt -mask brain_mask/', PAR_NAME, datafile, '.mif preprocessed_dwi/', PAR_NAME, datafile, '.mif 5ttimage_', PAR_NAME, '.mif ' PAR_NAME '_out_wm ' PAR_NAME '_out_gm ' PAR_NAME '_out_csf -force']);
%    
% %generate a response function per each subject - use the dhollander algorithm    
% unix(['dwi2response dhollander -mask brain_mask/', PAR_NAME, datafile, '.mif preprocessed_dwi/', PAR_NAME, datafile, '.mif ' PAR_NAME, '_out_sfwm ' PAR_NAME '_out_gm ' PAR_NAME '_out_csf -voxels ' PAR_NAME '_voxels.mif']);
% 
% 
% 
% 
% 
% 
% 
% 
% %check global intensity normalisation
% 
% unix(['mtnormalise wmfod_' PAR_NAME '.mif wmfod_norm_' PAR_NAME '.mif gmfod_' PAR_NAME '.mif gmfod_norm_' PAR_NAME '.mif csffod_' PAR_NAME '.mif csffod_norm_' PAR_NAME '.mif -mask upsampled_mask_' PAR_NAME '.mif -check_norm norm_' PAR_NAME '.mif -check_mask mask_' PAR_NAME '.mif -check_factors factors_' PAR_NAME '.txt -force']);
% 
% 
% unix(['mrconvert wmfod_norm_' PAR_NAME '.mif wmfod_norm_' PAR_NAME '.nii']);
% unix(['mrconvert gmfod_norm_' PAR_NAME '.mif gmfod_norm_' PAR_NAME '.nii']);
% unix(['mrconvert csffod_norm_' PAR_NAME '.mif csffod_norm_' PAR_NAME '.nii']);
% 
% 
% unix(['mrconvert norm_' PAR_NAME '.mif norm_' PAR_NAME '.nii']);
% unix(['mrconvert mask_' PAR_NAME '.mif mask_' PAR_NAME '.nii']);
% %unix(['mrconvert factors_' PAR_NAME '.mif factors_' PAR_NAME '.nii']);
% 
% 
% unix(['mrinfo factors_' PAR_NAME '.mif']);
% 
% 
% 
% 
% %eddy cuda with mp_order correction
% 
% unix(['dwifslpreproc bbcgd' PAR_NAME, datafile, '.mif ebbcgd2' PAR_NAME, datafile, '.mif -rpe_pair -pe_dir AP -se_epi TUB0s_' PAR_NAME, datafile, '.mif -eddy_options " --repol --ol_nstd=4 --mporder" -eddy_slspec=my_slspec.txt -readout_time 0.07']);
% 
% %eddy loop
% subjects = uipickfiles;
% 
% for i = 1:length(subjects)
%     
%     [upper_path, PAR_NAME, ~] = fileparts(subjects{1,i});
%     full_path = ([upper_path '/' PAR_NAME '/']);
%     
%     %move into participants folder
%     cd([startdir '/derivatives/diff_data/' PAR_NAME, '/dwi/']);
%     
%     %run eddy
%     unix(['dwifslpreproc bbcgd' PAR_NAME, datafile, '.mif ebbcgd' PAR_NAME, datafile, '.mif -rpe_pair -pe_dir AP -se_epi TUB0s_' PAR_NAME, datafile, '.mif -eddy_options " --repol --ol_nstd=3 --ol_type=both --mb=3" -eddyqc_all eddyqc_all -readout_time 0.07 -force']);
%     
%     %create a copy in NIFTI format
%     %unix(['mrconvert ebbcgd2', PAR_NAME, datafile,'.mif ebbcgd2', PAR_NAME, datafile, '.nii']); %eddy corrected data    
%     
% end 
% 
% 
% %check all brain masks with BET algorithm
% 
% subjects = uipickfiles;
% datafile = '_acq_data_dwi';
% 
% for i = 1:length(subjects)
%     
%     [upper_path, PAR_NAME, ~] = fileparts(subjects{1,i});
%     full_path = ([upper_path '/' PAR_NAME '/']);
%     
%     cd([startdir '/test/derivatives/' PAR_NAME, '/dwi/']);
%      
%     unix(['fslmaths TUB0s_' PAR_NAME, datafile, '.nii -Tmean combinedTUB0s_' PAR_NAME, datafile, '.nii']);
%     unix(['bet combinedTUB0s_' PAR_NAME, datafile, '.nii bet_' PAR_NAME, datafile, '.nii -m -f 0.2']);
%     
% end
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% %5ttedit with pathological tissue (WMH)
% 
% 
%  %a) co-registration of t1w and t2 FLAIR to dwi image through fsl FLIRT
%     %convert to nii format to run fsl's FLIRT - use the best B0 volume,
%     %which will be the first vol in the dwi sequence (vol 0).
%     unix(['mrconvert -coord 3 0 preprocessed_dwi/', PAR_NAME, datafile,'.mif ref_b0_', PAR_NAME, '.nii ']);
%     
%     %linear registration with 6 dof and the tranformation matrix output
%     unix(['flirt -in ', PAR_NAME, '_T1w.nii -ref ref_b0_', PAR_NAME, '.nii -dof 6 -out t1_flirt_' PAR_NAME, '.nii -omat transform_flirt_t12dwi.mat']);
%     unix(['flirt -in ', PAR_NAME, '_FLAIR.nii -ref ref_b0_', PAR_NAME, '.nii -dof 6 -out t2_flirt_' PAR_NAME, '.nii -omat transform_flirt_t22dwi.mat']);
% 
%     %apply the linear transformation to the t1 and t2 image
%     unix(['transformconvert transform_flirt_t12dwi.mat ' PAR_NAME, '_T1w.nii ref_b0_', PAR_NAME, '.nii flirt_import transform_mrtrix_t12dwi.mat']);
%     unix(['transformconvert transform_flirt_t22dwi.mat ' PAR_NAME, '_FLAIR.nii ref_b0_', PAR_NAME, '.nii flirt_import transform_mrtrix_t22dwi.mat']);
%     unix(['mrtransform ' PAR_NAME, '_T1w.nii -linear transform_mrtrix_t12dwi.mat ' PAR_NAME, '_T1coereg.nii']); 
%     unix(['mrtransform ' PAR_NAME, '_FLAIR.nii -linear transform_mrtrix_t12dwi.mat -template ' PAR_NAME, '_T1coereg.nii ' PAR_NAME, '_T2coereg.nii']); 
% 
%     %convert to .mif (mrtrix) format
%     unix(['mrconvert ' PAR_NAME, '_T1coereg.nii ' PAR_NAME '_T1coereg.mif']);
%     unix(['mrconvert ' PAR_NAME, '_T2coereg.nii ' PAR_NAME '_T2coereg.mif']);
%  
%     %b) generate 5tt image with brain mask, t1, and t2 FLAIR
%     unix(['5ttgen fsl -mask brain_mask/', PAR_NAME, datafile, '.mif -t2 ' PAR_NAME, '_T2coereg.mif ' PAR_NAME '_T1coereg.mif 4ttimage_' PAR_NAME '.mif']);
%     
%     %edit in the pathological tissue (WMH) to the 5tt image:
%     %apply linear tranformation matrix to FLAIR lesion  mask
%     unix(['flirt -in ples_lpa_mr', PAR_NAME, '_FLAIR.nii.gz -ref ref_b0_', PAR_NAME, '.nii -dof 6 -out WMH_mask_flirt_' PAR_NAME, '.nii -omat transform_flirt_WMH_mask2dwi.mat']);
%     %apply the linear transformation to the WMH mask
%     unix(['transformconvert transform_flirt_WMH_mask2dwi.mat ples_lpa_mr' PAR_NAME, '_FLAIR.nii.gz ref_b0_', PAR_NAME, '.nii flirt_import transform_mrtrix_WMH_mask2dwi.mat -force']);
%     unix(['mrtransform ples_lpa_mr' PAR_NAME, '_FLAIR.nii.gz -linear transform_mrtrix_WMH_mask2dwi.mat ' PAR_NAME, '_WMH_maskcoereg3.nii -force']); 
%     unix(['mrtransform ples_lpa_mr' PAR_NAME, '_FLAIR.nii.gz -linear transform_mrtrix_WMH_mask2dwi.mat -template 4ttimage_vol0_' PAR_NAME, '.nii ' PAR_NAME, '_WMH_maskcoereg3.nii -force']); 
%     unix(['mrtransform ples_lpa_mr' PAR_NAME, '_FLAIR.mif -template 4ttimage_' PAR_NAME, '.mif ' PAR_NAME, '_WMH_mask_transformed.mif -force']); 
% 
%     %convert to .mif (mrtrix) format
%     unix(['mrconvert ' PAR_NAME, '_WMH_maskcoereg3.nii ' PAR_NAME '_WMH_maskcoereg3.mif -force']);
%     %add the image into the 5tt image
%     unix(['5ttedit -path ' PAR_NAME, '_WMH_maskcoereg3.mif 4ttimage_' PAR_NAME, '.mif 5ttimage_' PAR_NAME '.mif -force']);
%     unix(['5ttedit -path WMH_mask_flirt_' PAR_NAME, '.mif 4ttimage_' PAR_NAME, '.mif 5ttimage2_' PAR_NAME '.mif -force']);
%     unix(['5ttedit -path ples_lpa_mr', PAR_NAME, '_FLAIR.mif 4ttimage_' PAR_NAME, '.mif 5ttimage2_' PAR_NAME '.mif -force']);
%     unix(['flirt -in ples_lpa_mr', PAR_NAME, '_FLAIR.nii.gz -ref ref_b0_', PAR_NAME, '.nii -dof 6 -out WMH_mask_flirt_' PAR_NAME, '.nii -omat transform_flirt_WMH_mask2dwi.mat']);
%     unix(['5ttedit -path ', PAR_NAME, '_WMH_mask_transformed.mif 4ttimage_' PAR_NAME, '.mif 5ttimage2_' PAR_NAME '.mif -force']);
% 
%     
%     
%     unix(['mrconvert 5ttimage_' PAR_NAME, '.mif 5ttimage_' PAR_NAME, '.nii -force']); 
%     unix(['mrconvert 4ttimage_' PAR_NAME, '.mif 4ttimage_' PAR_NAME, '.nii -force']); 
%     unix(['mrconvert -coord 3 0 4ttimage_', PAR_NAME, '.mif 4ttimage_vol0_', PAR_NAME, '.nii']);
%     unix(['5ttcheck 5ttimage_' PAR_NAME, '.mif']);
%     unix(['5ttcheck -voxels prefix 5ttimage_' PAR_NAME, '.mif']);
% 
%     unix(['mrconvert prefix.mif prefix.nii']);
%     
%     unix(['mrconvert WMH_mask_flirt_' PAR_NAME, '.nii.gz WMH_mask_flirt_' PAR_NAME, '.mif -force']);
%     unix(['mrconvert ples_lpa_mr', PAR_NAME, '_FLAIR.nii.gz ples_lpa_mr', PAR_NAME, '_FLAIR.mif']);
%     unix(['mrconvert ' PAR_NAME, '_WMH_mask_transformed.mif ' PAR_NAME, '_WMH_mask_transformed.nii -force']);
% 
% 
%     %diary testFile
%     
%     x = fscanf(unix(['5ttcheck -info 5ttimage_' PAR_NAME, '.mif']), '%s');
%    results = evalc(unix(['5ttcheck 5ttimage_' PAR_NAME, '.mif']));
% %diary off
% %type testFile
% 
% participants = dir(fullfile('preprocessed_dwi', '*.mif'));
% 
% 
% fid = fopen('5ttImageCheck.txt', 'w');
% 
% for i = 1:length(participants)
%     full_name = participants(i).name;
%     PAR_NAME = full_name(1:15);
%     
%     FiveTTImageCheck(PAR_NAME);
% end
% 
% for i = 1:length(participants)
%     
%     fid5 = fopen('5ttImageCheck.txt','a+');
%     
% %     full_name = participants(i).name;
% %     PAR_NAME = full_name(1:15);
%     
%     results = unix(['5ttcheck 5ttimage_' PAR_NAME, '.mif']);
%     if results == 0
%         text2file = ('Input image checked OK');
%     elseif results == 1
%         text2file = ('Error - check 5ttimage');
%     end 
%     
%     %print out results on the BestB0.txt file.
%     fprintf(fid5, '\n');
%     fprintf(fid5, '%s %s', PAR_NAME, text2file);
%     
%     
%     fclose(fid5);
%         
% end
% 
% 
% system(['5ttcheck 5ttimage_' PAR_NAME, '.mif'] ' > output.txt');
% 
% system('5ttcheck 5ttimage_sub-ADPRC0086F0.mif > output.txt')
% 
% 
% x = disp('hi', 's')
% x = 'hi'
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% %brain masks and upsampled masks
% 
% 
% 
% unix(['fslmaths TUB0s_' PAR_NAME, datafile, '.nii -Tmean combinedTUB0s_' PAR_NAME, datafile, '.nii']);
% 
% unix(['bet combinedTUB0s_' PAR_NAME, datafile, '.nii bet_mask_' PAR_NAME, datafile, '.nii -m -f 0.2']);
% 
% %do eddy
% 
% unix(['dwibiascorrect ants -mask bet_mask_' PAR_NAME, datafile, '_mask.nii.gz ebbcgd' PAR_NAME, datafile, '.mif febbcgd2' PAR_NAME, datafile, '.mif']);
% unix(['mrconvert febbcgd2', PAR_NAME, datafile,'.mif febbcgd2', PAR_NAME, datafile, '.nii']);
% 
% unix(['dwi2mask -clean_scale 3 febbcgd2' PAR_NAME, datafile, '.mif brain_mask_2' PAR_NAME, datafile, '.mif']);
% unix(['mrconvert brain_mask_2', PAR_NAME, datafile,'.mif brain_mask_2', PAR_NAME, datafile, '.nii']);
% 
% 
% 
% 
%  unix(['dwi2mask -clean_scale 3 upsampled_dwi_' PAR_NAME '.mif upsampled_mask_' PAR_NAME, '.nii -force']);
% 
%  unix(['dwi2mask upsampled_dwi_' PAR_NAME '.mif upsampled_mask_2' PAR_NAME, '.nii -force']);
%  
%  unix(['mrconvert upsampled_mask_' PAR_NAME,'.mif upsampled_mask_', PAR_NAME, datafile, '.nii']);
% 
%  unix(['mrconvert upsampled_dwi_' PAR_NAME,'.mif upsampled_dwi_', PAR_NAME, '.nii']);
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% 
% cd([startdir '/test/derivatives/', groupname, '/preprocessed_dwi/']);
% pop_rep_pts = uipickfiles;
% cd ../;
% fid4 = fopen('pop_temp_pts.txt', 'a+');
% if (fid4 == -1)
%     disp('Error in opening the text file.')
% else 
%     for i = 1:length(pop_rep_pts)
%         [upper_path, POP_PAR, ~] = fileparts(pop_rep_pts{1,i});
%         POP_PAR = POP_PAR(1:15);
%         fprintf(fid4, '%s', POP_PAR);
%         fprintf(fid4, '\n');
%     end
%     fclose(fid4);
% end
% 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % unix(['mrinfo bcgd' PAR_NAME, datafile, '.mif']);
% % 
% % %WMH segmentation (5ttgen 5 tissue type segementation in CSD script).
% % 
% % %need to preprocess/clean and then segment FLAIR images
% % 
% % %align FLAIR and t1 image
% % unix(['flirt -in ', t1w, '.nii -ref ', PAR_NAME, '_FLAIR.nii -dof 12 -out anat_FLAIR_flirt_' PAR_NAME, '.nii']);
% % 
% % 
% % 
% % 
% % %b) generate 5tt image
% % unix(['5ttgen fsl anat_flirt_' PAR_NAME '.mif 4ttimage_nocrop_' PAR_NAME '.mif -nocrop']);
% % 
% % %edit in the pathological tissue (WMH from FLAIR) to the 5tt image
% % unix(['5ttedit -path ' PAR_NAME '_FLAIR.nii 4ttimage_nocrop_' PAR_NAME '.mif 5ttimage_' PAR_NAME '.mif']);
% % 
% % 
% % 
% % unix(['mrinfo 4ttimage_' PAR_NAME '.mif']);
% % unix(['mrinfo 4ttimage_nocrop_' PAR_NAME '.mif']);
% % unix(['mrinfo anat_flirt_' PAR_NAME '.mif']);
% % unix(['mrinfo ' PAR_NAME '_FLAIR.nii']);
% % unix(['mrinfo ' t1w '.nii']);
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % %Step: Global intensity normalisation (generate CSF mask)..................
% % %segment a CSF tissue image from brain to create a CSF mask for global
% % %intensity normalisation step
% % 
% % 
% % %copy participant's t1w images into main group folder
% % copyfile ([startdir '/test/derivatives/' PAR_NAME '/anat/', '*.nii'], [startdir,'/test/derivatives/', PAR_NAME '/dwi/']);
% % 
% % t1w = ([PAR_NAME(1:13), '_T1w']);
% % 
% % %co-registration of t1w and dwi image through fsl FLIRT
% % %convert to nii format to run fsl's FLIRT - use the best B0 file for the
% % %diffusion file - for now, just use vol 0.
% % unix(['mrconvert -coord 3 0 febcgd', PAR_NAME, datafile,'.mif AP_cleaned_', PAR_NAME, '.nii']);
% % 
% % unix(['flirt -in ', t1w, '.nii -ref AP_cleaned_', PAR_NAME, '.nii -dof 12 -out anat_flirt_' PAR_NAME, '.nii']);
% % 
% % %convert to .mif (mrtrix) format
% % unix(['mrconvert anat_flirt_' PAR_NAME, '.nii.gz anat_flirt_' PAR_NAME '.mif']);
% % 
% % %create 5tt image w/ t1w
% % unix(['5ttgen fsl anat_flirt_' PAR_NAME '.mif 5ttimage_' PAR_NAME '.mif']);
% % 
% % %create a copy in NIFIT format
% % unix(['mrconvert 5ttimage_', PAR_NAME, '.mif 5ttimage_', PAR_NAME, '.nii']);
% % 
% % %take CSF image from the 5ttimage
% % unix(['mrconvert -coord 3 3 5ttimage_', PAR_NAME, '.mif CSF_image_' PAR_NAME, '.mif']);
% % 
% % %create a copy in NIFIT format
% % unix(['mrconvert CSF_image_', PAR_NAME, '.mif CSF_image_', PAR_NAME, '.nii']);
% % 
% % %segment a mask of voxels for CSF
% % unix(['5ttedit -csf CSF_image_' PAR_NAME, '.mif 5ttimage_' PAR_NAME, '.mif CSF_mask_' PAR_NAME, '.mif']);
% % 
% % %create a copy in NIFIT format
% % unix(['mrconvert CSF_mask_', PAR_NAME, '.mif CSF_mask_', PAR_NAME, '.nii']);
% % 
% % 
% % 
% % %transform CSF mask on diffusion image
% % 
% % 
% % 
% % %mrregister <fa_template> - -mask2 <input_brain_mask> -nl_scale 0.5,0.75,1.0 -nl_niter 5,5,15 -nl_warp - tmp.mif | mrtransform <input_template_wm_mask> -template <input_dwi> -warp - - | dwinormalise <input_dwi> - <output_normalised_dwi>; rm tmp.mif
% % 
% % 
% % 
% % unix(['mrregister CSF_mask_' PAR_NAME, '.mif - -mask2 brain_mask_' PAR_NAME, datafile '.mif -nl_scale 0.5,0.75,1.0 -nl_niter 5,5,15 -nl_warp - tmp.mif']); 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % %long-ass command here...global normalisation for 1 individual using the
% % %CSF mask
% % unix(['mrtransform CSF_mask_' PAR_NAME '.mif -template febcgd', PAR_NAME, datafile,'.mif -warp - | dwinormalise individual febcgd', PAR_NAME, datafile,'.mif - global_CSF_normalised_' PAR_NAME '.mif']);
% % 
% % 
% % %Perfom global intensity normalisation across subjects
% % 
% % mrtransform <input_template_wm_mask> -template <input_dwi> -warp - -  
% % 
% % dwinormalise <input_dwi> - <output_normalised_dwi>; rm tmp.mif
% % 
% % 
% % 
% % unix(['mrtransform febcgd', PAR_NAME, datafile,'.mif -template CSF_mask_' PAR_NAME '.mif -warp febcgd', PAR_NAME, datafile,'.mif outputImage2.mif']);  
% % 
% % %create a copy in NIFIT format
% % unix(['mrconvert outputImage.mif outputImage.nii']);
% % 
% %     
% % 
% % %perform global intensity normalisation across all participants.
% % unix(['dwinormalise group input_DW_images input_brain_mask output_normalised_dwi output_fa_template.mif output_template_wm_mask.mif']);
% % 
% % 
% % 
% %     
% %     
% %     
% %Step: signal drift correction:............................................
% %Check for signal drift correction with the phantom data
% 
% %combine BU with main dwi dataset
% DiffusionData = ('ADPRC_DRIFT_TEST_Diff_MB3_');
% 
% %combine first diff dataset together
% unix(['mrcat ' DiffusionData '1_3_1.nii ' DiffusionData 'BU_AP_1_9_1.nii Diff1.nii']); 
% 
% %combine second diff dataset together
% unix(['mrcat ' DiffusionData '1_18_1.nii ' DiffusionData 'BU_AP_1_24_1.nii Diff2.nii']); 
% 
% %edit gradient files to include the last BU in it (manual changes have been applied). 
% 
% %you will need to then place participant all bval and bvec files into the 
% %same folder, and then use ExploreDTI to convert the   files into a
% %bmatrix file. 
% 
% 
% 
% %convert nii.gz to .nii for signal drift correction
% unix(['mrconvert combined_', PAR_NAME, datafile,'.nii.gz combined_', PAR_NAME, datafile,'.nii']);
%     
% %calculate a 'b-matrix' file for signal drift correction - might have to be
% %done after GradientAddON function
% 
% %copy gradient files into one folder per participant
% copyfile
% 
% %move the b-matrix .txt file into the main participant derivatives folder;
% %rename the .txt file to same name as the dwi file (e.g. combined_
% %PAR_NAME..)
% movefile
% 
% %Question: Does signal drift need to be performed on the p-a files? I know
% %it should be performed on the BUs (B0s) and the main dwi dataset. For now,
% %let's just apply signal dirfft correction to 106 volumes (not with the p-a
% %files).
% GradientAddOn(PAR_NAME, datafile);
% 
% unix(['mrconvert -coord 3 0:105 combined_' PAR_NAME, datafile,'.nii.gz for_sdc_' PAR_NAME, datafile,'.nii']);
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % unix(['mrconvert combined_', PAR_NAME, datafile,'.nii.gz converted_', PAR_NAME, datafile,'.mif']);
% % 
% % 
% % 
% % 
% % 
% % %add all files together (inlcude last BU file to the main dwi dataset).
% % 
% % 
% % if Smooth == 'y' && CSD == 'y'
% %     unix(['mrfilter febcgd' PAR_NAME, datafile, '.mif smooth -stdev 1 testSmoothOrOperator' PAR_NAME, datafile, '.mif']);
% % else if Smooth == 'y' && CSD == 'n'
% %         unix(['mrfilter ebcgd' PAR_NAME, datafile, '.mif smooth -stdev 1 testSmoothOrOperator2' PAR_NAME, datafile, '.mif']);
% %     end
% % end
% % 
% % 
% % 
% % 
% % unix(['fslmerge -t all', PAR_NAME, '_acq_data_dwi', PAR_NAME, 'acq_BU_dwi', PAR_NAME, '_acq_data_dwi']); %this doesn't work :(
% % 
% % %unix(['fslmerge -t sub-ADPRC0001F0_acq_alldata_dwi sub-ADPRC0001F0_acq_data_dwi sub-ADPRC0001F0_acq_BU_dwi']);
% % 
% % unix(['fslmerge -t newData mainData BU']); %this works
% % 
% % 
% % 
% % %testing eddy and additional eddy correction options...
% % 
% % %run fsl Eddy
% % unix(['eddy_openmp --imain=gd', PAR_NAME, '_acq_data_dwi --mask=topup_BU_BD_brain_mask --index=/data/USERS/LENORE/dprc_scripts/DKI/index.txt --acqp=/data/USERS/LENORE/dprc_scripts/DKI/acquparams.txt --bvecs='...
% %     , PAR_NAME,'_acq_data_dwi.bvec --bvals=', PAR_NAME,'_acq_data_dwi.bval --fwhm=0 --topup=topup_BU_BD --flm=quadratic --out=egd', PAR_NAME, '_acq_data_dwi']);
% % 
% % unix(['mrconvert bcgd', PAR_NAME, datafile,'.mif bcgd', PAR_NAME, datafile, '.nii']);
% % unix(['mrconvert AP_', PAR_NAME, datafile,'.mif AP_', PAR_NAME, datafile, '.nii']);
% % %unix(['mrconvert brain_mask_', PAR_NAME, datafile,'.mif brain_mask_', PAR_NAME, datafile, '.nii.gz']);
% % 
% % 
% % %fsl eddy 
% % tic
% % unix(['eddy_openmp --imain=bcgd', PAR_NAME, datafile, ' --mask=topup_BU_BD_brain_mask --index=/data/USERS/LENORE/scripts/dprc/old_DKI/index2.txt --acqp=/data/USERS/LENORE/scripts/dprc/old_DKI/acquparams.txt --bvecs='...
% %     , PAR_NAME, datafile '.bvec --bvals=', PAR_NAME, datafile, '.bval --fwhm=0 --topup=topup_BU_BD --flm=quadratic --out=fsl_ebcgd', PAR_NAME, datafile]);
% % toc
% % 
% % 
% % tic
% % unix(['/data/SOFTWARE/fsl_v6.0.3/bin/eddy_openmp --imain=bcgd', PAR_NAME, datafile, ' --mask=brain_mask_', PAR_NAME, datafile ' --index=/data/USERS/LENORE/scripts/dprc/old_DKI/index2.txt --acqp=/data/USERS/LENORE/scripts/dprc/old_DKI/acquparams.txt --bvecs='...
% %     , PAR_NAME, datafile '.bvec --bvals=', PAR_NAME, datafile, '.bval --fwhm=0 --topup=topup_BU_BD --flm=quadratic --out=fsl_ebcgd', PAR_NAME, datafile]);
% % toc
% % 
% % 
% % 
% % %fsl eddy w/ --repol option
% % tic
% % unix(['eddy_openmp --imain=gd', PAR_NAME, datafile, ' --mask=topup_BU_BD_brain_mask --index=/data/USERS/LENORE/scripts/dprc/old_DKI/index.txt --acqp=/data/USERS/LENORE/scripts/dprc/old_DKI/acquparams.txt --bvecs='...
% %     , PAR_NAME, datafile '.bvec --bvals=', PAR_NAME, datafile, '.bval --fwhm=0 --topup=topup_BU_BD --flm=quadratic --repol --out=fslw/repol_egd', PAR_NAME, datafile]);
% % toc
% % 
% % 
% % %eddy with --repol option in mrtrix
% % tic
% % %run topup, eddy (w/ -repol)
% % unix(['dwifslpreproc bcgd' PAR_NAME, datafile, '.mif repol2-ebcgd' PAR_NAME, datafile, '.mif -rpe_pair -pe_dir AP -se_epi B0s_' PAR_NAME, datafile, '.mif -eddy_options " --repol --ol_nstd=4" -readout_time 0.07']);
% % toc
% % 
% % unix(['mrconvert repol2-ebcgd', PAR_NAME, datafile,'.mif repol2-ebcgd', PAR_NAME, datafile, '.nii']);
% % 
% % 
% % 
% % 
% % 
% % %Spatial smoothing using anisotropic diffusion filter (ADF) - perona-malik (using afni)
% % 
% % %3danisosmooth [options] dataset
% % %unix(['3danisosmooth febcgd', PAR_NAME, datafile, '.nii'])
% % unix(['3danisosmooth ADFtest_', PAR_NAME, datafile, '.nii']);
% % unix(['3danisosmooth -3D ADFtest_', PAR_NAME, datafile, '.nii']);
% % %convert back to nifti format
% % %unix(['3dAFNItoNIFTI SmoothAni+orig. -prefix smoothed.nii']);
% % 
% % unix(['3dAFNItoNIFTI -prefix smoothed2 SmoothAni+orig.']); %output looks weird...
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % 
% % %-------------------------------------------------------------------------%
% % %Postprocessing script 'pre-steps' - not really needed with preproccessing
% % %modifications. 
% % 
% % %run for loops to copy all the necessary files for each particpiant group
% % 
% % %choose HC participants
% % cd([startdir '/test/derivatives/all/input_DW_images']);
% % HC = uipickfiles;
% % 
% % for i = 1:length(HC)
% %     
% %     [upper_path, full_name, ~] = fileparts(HC{1,i});
% %     PAR_NAME = full_name(1:15);
% %     
% %     %copy the cleaned dwi files and brain masks
% %     copyfile ([startdir '/test/derivatives/all/input_DW_images/', PAR_NAME, '*'], [startdir,'/test/derivatives/HC/input_DW_images']);
% %     copyfile ([startdir '/test/derivatives/all/input_brain_mask/', PAR_NAME, '*'], [startdir,'/test/derivatives/HC/input_brain_mask']);
% %     
% %     %copy the t1w images
% %     copyfile ([startdir '/test/' PAR_NAME '/anat/', '*.nii'], [startdir,'/test/derivatives/HC']);
% %     
% %     %put copies of the brain mask onto the parent HC folder
% %     %copyfile ([startdir '/test/derivatives/HC/input_brain_mask/', PAR_NAME, datafile, '.mif'], [startdir,'/test/derivatives/HC/', 'brain_mask_' PAR_NAME, datafile, '.mif']);
% %     
% % end
% % 
% % clear i;
% % SCD = uipickfiles;
% % 
% % for i = 1:length(SCD)
% %     
% %     [upper_path, full_name, ~] = fileparts(SCD{1,i});
% %     PAR_NAME = full_name(1:15);
% %     
% %     %copy the cleaned dwi files and brain masks
% %     copyfile ([startdir '/test/derivatives/all/input_DW_images/', PAR_NAME, '*'], [startdir,'/test/derivatives/SCD/input_DW_images']);
% %     copyfile ([startdir '/test/derivatives/all/input_brain_mask/', PAR_NAME, '*'], [startdir,'/test/derivatives/SCD/input_brain_mask']);
% %     
% %     %copy the t1w images
% %     copyfile ([startdir '/test/' PAR_NAME '/anat/', '*.nii'], [startdir,'/test/derivatives/SCD']);
% %     
% %     %put copies of the brain mask onto the parent HC folder
% %     %copyfile ([startdir '/test/derivatives/SCD/input_brain_mask/', PAR_NAME, datafile, '.mif'], [startdir,'/test/derivatives/SCD/', 'brain_mask_' PAR_NAME, datafile, '.mif']);
% %     
% % end
% % 
% % %perform normalisation step to create wm/fa mask per each group
% % %for HC
% % cd([startdir '/test/derivatives/HC']);
% % unix(['dwinormalise group input_DW_images input_brain_mask output_normalised_dwi output_fa_template.mif output_template_wm_mask.mif']);
% % copyfile ([startdir '/test/derivatives/HC/output_normalised_dwi/', '*'], [startdir,'/test/derivatives/HC/']); %copy normalised data onto parent HC folder
% % 
% % %put copies of the brain mask onto the parent HC folder
% % copyfile ([startdir '/test/derivatives/HC/input_brain_mask/', '*'], [startdir,'/test/derivatives/HC/', 'brain_mask_', '*']); %copy & rename brain mask data onto parent HC folder
% % 
% % 
% % %for SCD
% % cd([startdir '/test/derivatives/SCD']);
% % unix(['dwinormalise group input_DW_images input_brain_mask output_normalised_dwi output_fa_template.mif output_template_wm_mask.mif']);
% % %for MCI
% % cd([startdir '/test/derivatives/MCI']);
% % unix(['dwinormalise group input_DW_images input_brain_mask output_normalised_dwi output_fa_template.mif output_template_wm_mask.mif']);
% % %for AD
% % cd([startdir '/test/derivatives/AD']);
% % unix(['dwinormalise group input_DW_images input_brain_mask output_normalised_dwi output_fa_template.mif output_template_wm_mask.mif']);